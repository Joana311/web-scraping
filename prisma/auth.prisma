model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// if it doesnt work, user name instead of username
// also use cuid instead of uuid if something goes wrong
model User {
    id            String    @id @default(cuid())
    name          String?
    username      String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    created_at    DateTime  @default(now())
}

// model User {
//   id            String   @id @default(uuid())
//   firstname     String?
//   lastname      String?
//   username      String
//   created_at    DateTime @default(now())
//   primary_email String   @unique
//   password String @ignore
//   workouts UserWorkout[]
// }

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
