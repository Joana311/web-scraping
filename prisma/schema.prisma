// *** DO NOT EDIT. GENERATED BY PRISMIX. ***
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Exercise {
  id               String         @id @default(uuid())
  UserExercise     UserExercise[] @relation(name: "ExerciseToUserExercise")
  name             String
  href             String?
  force            String?
  equipment        Equipment?     @relation(name: "EquipmentToExercise", fields: [equipment_name], references: [name])
  equipment_name   String?
  muscle           Muscle?        @relation(name: "ExerciseToMuscle", fields: [muscle_name], references: [name])
  muscle_name      String?
  video_url        String?
  variations       Exercise[]     @relation(name: "ExerciseVariation")
  base_exercise    Exercise?      @relation(name: "ExerciseVariation", fields: [base_exercise_id], references: [id])
  base_exercise_id String?

  @@unique([href, name, equipment_name, muscle_name])
}

model User {
  id            String        @id @default(cuid())
  workouts      UserWorkout[] @relation(name: "UserToUserWorkout")
  name          String?
  username      String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]     @relation(name: "AccountToUser")
  sessions      Session[]     @relation(name: "SessionToUser")
  created_at    DateTime      @default(now())
}

model UserSecrets {
  user_id String @unique
  secret  String
}

model UserWorkout {
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt
  ended_at   DateTime?
  id         String         @id @default(cuid())
  owner      User?          @relation(name: "UserToUserWorkout", fields: [owner_id], references: [id])
  owner_id   String
  exercises  UserExercise[] @relation(name: "UserExerciseToUserWorkout")
  closed     Boolean        @default(false)

  @@unique([owner_id, id], name: "owner_and_workout_id")
}

model UserExercise {
  exercise    Exercise     @relation(name: "ExerciseToUserExercise", fields: [exercise_id], references: [id])
  exercise_id String
  id          Int          @id @default(autoincrement())
  sets        Set[]        @relation(name: "SetToUserExercise")
  Workout     UserWorkout? @relation(name: "UserExerciseToUserWorkout", fields: [workout_id], references: [id], onDelete: Cascade)
  workout_id  String?

  @@unique([exercise_id, workout_id, id])
}

model Set {
  id               Int          @id @default(autoincrement())
  updated_at       DateTime     @default(now()) @updatedAt
  weight           Int?
  reps             Int          @default(0)
  rpe              Int          @default(0)
  UserExercise     UserExercise @relation(name: "SetToUserExercise", fields: [user_exercise_id], references: [id], onDelete: Cascade)
  user_exercise_id Int
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(name: "AccountToUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(name: "SessionToUser", fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Equipment {
  name      String     @unique
  exercises Exercise[] @relation(name: "EquipmentToExercise")
}

model BodyPart {
  name    String   @unique
  muscles Muscle[] @relation(name: "BodyPartToMuscle")
  href    String?
}

model Muscle {
  name          String     @unique
  bodypart      BodyPart   @relation(name: "BodyPartToMuscle", fields: [bodypart_name], references: [name])
  bodypart_name String
  exercises     Exercise[] @relation(name: "ExerciseToMuscle")
}
